class Solution1 {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i = 0;i<nums.size(); ++i){
            for(int j = i+1;j<nums.size(); ++j){
                if(nums[i]+nums[j] == target){
                    return {i,j};
                }
            }
        }
        return {0,0};
    }
};
class Solution7 {
public:
    int reverse(int x) {
         
        long y = x % 10;
        x/=10;
        while(x%10!=0 || x/10!=0){
           
            y=y*10+(x%10);
            x/=10;
        }
        if(y>=INT32_MAX || y<=INT32_MIN){
                return 0;
        }
        if(x<0)
            return y*(-1);
        return y;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution2 {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1  == nullptr)
            return l2;
        if(l2  == nullptr)
            return l1;
        int cer = 0;
        ListNode* prev_l1 = l1;
        ListNode* start = l1;
        while(l1!=nullptr){
            if(l2 == nullptr){
                int tmp = l1->val+cer;
                std::cout<<l1<<' ';
                l1->val = (tmp%10);
                cer = tmp/10;
            }else{
            
                int tmp = l1->val+l2->val+cer;
                
                l1->val = tmp%10;
                cer = tmp/10;
                
                l2 = l2->next;
            }
            prev_l1 = l1;
            l1 = l1->next;
        }
        l1 = prev_l1;
        
        while(l2!=nullptr){
            l1->next = new ListNode;
            l1 = l1->next;
            
            if(cer!=0){
                int tmp = l2->val+cer;
                l1->val = tmp%10;
                cer = tmp/10;
            }else{
                l1->val = l2->val;
            }
            l2 = l2->next;
        }
        while(cer!=0){
            l1->next = new ListNode;
            l1 = l1->next;
            l1->val = cer%10;
            cer/=10;
        }
        return start;
    }
};
class Solution9 {
public:
    bool isPalindrome(int x) {
        if(x<0)
            return false;
        int size = 1;
        int y = x/10;
        while(y/10 || y%10){
            size*=10;
            y/=10;
        }
        while(size!=0){
            std::cout<<x/size<<':'<<x%10<<'\n';
            if(x/size != x%10){
                return false;
            }
            x%=size;
            x/=10;
            size/=100;
        }
        return true;
    }
};

class Solution13 {
public:
    int romanToInt(string s) {
        if(!s.size())
            return 0;
        std::map<char,int> val;
        val['I'] = 1;
        val['V'] = 5;
        val['X'] = 10;
        val['L'] = 50;
        val['C'] = 100;
        val['D'] = 500;
        val['M'] = 1000;
        if(s.size()==1)
            return val[s[0]];
        int num = 0;
        for(int i = 1;i<s.size();++i){
            if(val[s[i-1]]<val[s[i]]){
                num+=val[s[i]]-val[s[i-1]];
                ++i;
                if(i+1 == s.size()){
                    num+=val[s[i]];
                }
            }else{
                num +=val[s[i-1]];
                if(i+1 == s.size()){
                    num+=val[s[i]];
                }
            }
        }
        return num;

    }
};
